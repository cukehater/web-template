---
alwaysApply: true
---

# React Components & JSX Rules

## ðŸ§© **CRITICAL: Component Structure**

**ALWAYS DO:**

- Use functional components with hooks
- Use TypeScript for all components
- Define proper prop interfaces
- Use destructuring for props
- Export components as default exports

**Example:**

```typescript
interface UserCardProps {
  user: User;
  onEdit?: (id: string) => void;
  className?: string;
}

export default function UserCard({ user, onEdit, className }: UserCardProps) {
  return (
    <div className={cn('user-card', className)}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      {onEdit && (
        <button onClick={() => onEdit(user.id)}>
          Edit
        </button>
      )}
    </div>
  );
}
```

## ðŸŽ¨ **Styling Rules**

**MUST USE:**

- Tailwind CSS classes
- `cn()` utility for conditional classes
- CSS variables for theming
- Responsive design with Tailwind breakpoints

**Example:**

```typescript
const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
      },
      size: {
        default: 'h-9 px-4 py-2',
        sm: 'h-8 rounded-md px-3 text-xs',
        lg: 'h-10 rounded-md px-8',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  },
)
```

## ðŸ”„ **State Management**

**ALWAYS DO:**

- Use React hooks for local state
- Create custom hooks for reusable logic
- Use proper dependency arrays in useEffect
- Handle loading and error states

**NEVER DO:**

- Use class components
- Mutate state directly
- Forget to clean up effects
- Use useState when useReducer is more appropriate

## ðŸš« **NEVER DO:**

- Use inline styles (use Tailwind classes)
- Create components without proper typing
- Use array index as React key
- Forget to handle loading/error states
- Use `dangerouslySetInnerHTML` without sanitization
  description:
  globs:
  alwaysApply: false

---
