---
alwaysApply: true
---

# Accessibility (A11y) Rules

## ‚ôø **CRITICAL: Accessibility Requirements**

**ALWAYS IMPLEMENT:**

- Semantic HTML elements
- Proper ARIA labels and roles
- Keyboard navigation support
- Color contrast compliance
- Screen reader compatibility

## üè∑Ô∏è **Semantic HTML**

**MUST USE:**

- Proper heading hierarchy (h1, h2, h3, etc.)
- Semantic elements (nav, main, section, article)
- Form labels and fieldset elements
- Button elements for interactive actions
- List elements for lists

**Example:**

```typescript
export function Navigation() {
  return (
    <nav aria-label="Main navigation">
      <ul role="menubar">
        <li role="none">
          <a href="/dashboard" role="menuitem" aria-current="page">
            Dashboard
          </a>
        </li>
        <li role="none">
          <a href="/settings" role="menuitem">
            Settings
          </a>
        </li>
      </ul>
    </nav>
  );
}
```

## ‚å®Ô∏è **Keyboard Navigation**

**ALWAYS DO:**

- Ensure all interactive elements are keyboard accessible
- Implement proper focus management
- Use tabindex appropriately
- Handle keyboard events (Enter, Space, Arrow keys)

**Example:**

```typescript
export function Modal({ isOpen, onClose, children }: ModalProps) {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isOpen && modalRef.current) {
      modalRef.current.focus();
    }
  }, [isOpen]);

  const handleKeyDown = (e: KeyboardEvent) => {
    if (e.key === 'Escape') {
      onClose();
    }
  };

  return (
    <div
      ref={modalRef}
      role="dialog"
      aria-modal="true"
      tabIndex={-1}
      onKeyDown={handleKeyDown}
    >
      {children}
    </div>
  );
}
```

## üé® **Visual Accessibility**

**MUST IMPLEMENT:**

- Minimum color contrast ratio of 4.5:1 for normal text
- Don't rely solely on color to convey information
- Provide focus indicators
- Support high contrast mode

**Example:**

```typescript
// Use CSS custom properties for theming
const buttonStyles = {
  backgroundColor: 'var(--color-primary)',
  color: 'var(--color-primary-contrast)',
  border: '2px solid transparent',
  '&:focus-visible': {
    outline: '2px solid var(--color-focus)',
    outlineOffset: '2px',
  },
}
```

## üó£Ô∏è **Screen Reader Support**

**ALWAYS DO:**

- Provide descriptive alt text for images
- Use aria-label for elements without visible text
- Implement proper ARIA live regions
- Use aria-describedby for form help text

**Example:**

```typescript
export function ImageGallery({ images }: { images: Image[] }) {
  return (
    <div role="region" aria-label="Image gallery">
      {images.map((image, index) => (
        <img
          key={image.id}
          src={image.src}
          alt={image.alt || `Image ${index + 1} of ${images.length}`}
          aria-describedby={`description-${image.id}`}
        />
      ))}
    </div>
  );
}
```

## üö´ **NEVER DO:**

- Use `<div>` for buttons or links
- Remove focus indicators
- Use color alone to convey information
- Ignore keyboard navigation
- Use generic alt text like "image" or "photo"
- Create custom form controls without proper ARIA
  description:
  globs:
  alwaysApply: false

---
