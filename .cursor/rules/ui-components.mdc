# 🎨 UI 컴포넌트 개발 가이드라인

## 🏗️ **컴포넌트 구조**

### **기본 컴포넌트 템플릿**

```typescript
// components/feature/feature-card.tsx
import { cn } from '@/app/(cms)/_shared/lib/cn'
import { Card, CardContent, CardHeader, CardTitle } from '@/app/(cms)/_shared/shadcn/card'

interface FeatureCardProps {
  title: string
  description: string
  icon?: React.ReactNode
  className?: string
  onClick?: () => void
}

export function FeatureCard({
  title,
  description,
  icon,
  className,
  onClick
}: FeatureCardProps) {
  return (
    <Card
      className={cn(
        "cursor-pointer transition-all hover:shadow-lg",
        onClick && "hover:scale-105",
        className
      )}
      onClick={onClick}
    >
      <CardHeader className="flex flex-row items-center space-y-0 pb-2">
        {icon && <div className="mr-2">{icon}</div>}
        <CardTitle className="text-lg font-semibold">{title}</CardTitle>
      </CardHeader>
      <CardContent>
        <p className="text-sm text-muted-foreground">{description}</p>
      </CardContent>
    </Card>
  )
}
```

### **복합 컴포넌트 구조**

```typescript
// components/feature/feature-list.tsx
import { FeatureCard } from './feature-card'

interface Feature {
  id: string
  title: string
  description: string
  icon?: React.ReactNode
}

interface FeatureListProps {
  features: Feature[]
  onFeatureClick?: (feature: Feature) => void
  className?: string
}

export function FeatureList({
  features,
  onFeatureClick,
  className
}: FeatureListProps) {
  return (
    <div className={cn("grid gap-4 md:grid-cols-2 lg:grid-cols-3", className)}>
      {features.map((feature) => (
        <FeatureCard
          key={feature.id}
          title={feature.title}
          description={feature.description}
          icon={feature.icon}
          onClick={() => onFeatureClick?.(feature)}
        />
      ))}
    </div>
  )
}
```

## 🎯 **Props 및 타입 정의**

### **Props 인터페이스 규칙**

```typescript
// ✅ 권장: 명확한 타입 정의
interface ButtonProps {
  // 필수 props
  children: React.ReactNode
  variant?:
    | 'default'
    | 'destructive'
    | 'outline'
    | 'secondary'
    | 'ghost'
    | 'link'
  size?: 'default' | 'sm' | 'lg' | 'icon'

  // 이벤트 핸들러
  onClick?: () => void
  onMouseEnter?: () => void

  // 스타일링
  className?: string
  disabled?: boolean

  // 접근성
  'aria-label'?: string
  'aria-describedby'?: string
}

// ✅ 제네릭 컴포넌트
interface DataTableProps<T> {
  data: T[]
  columns: Column<T>[]
  onRowClick?: (item: T) => void
  loading?: boolean
}
```

### **타입 가드 및 유틸리티**

```typescript
// 타입 가드 함수
function isButtonElement(element: HTMLElement): element is HTMLButtonElement {
  return element.tagName === 'BUTTON'
}

// 유니온 타입 처리
type ButtonVariant = 'primary' | 'secondary' | 'danger'

const buttonStyles: Record<ButtonVariant, string> = {
  primary: 'bg-blue-500 hover:bg-blue-600',
  secondary: 'bg-gray-500 hover:bg-gray-600',
  danger: 'bg-red-500 hover:bg-red-600',
}
```

## 🎨 **스타일링 규칙**

### **Tailwind CSS 활용**

```typescript
// ✅ 권장: Tailwind CSS 클래스 사용
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow">
  <div className="flex items-center space-x-3">
    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
      <Icon className="w-5 h-5 text-blue-600" />
    </div>
    <div>
      <h3 className="font-medium text-gray-900">제목</h3>
      <p className="text-sm text-gray-500">설명</p>
    </div>
  </div>
  <Button variant="outline" size="sm">
    액션
  </Button>
</div>

// ✅ 조건부 스타일링
<div className={cn(
  "p-4 rounded-lg border",
  isActive && "bg-blue-50 border-blue-200",
  isError && "bg-red-50 border-red-200",
  className
)}>
```

### **반응형 디자인**

```typescript
// ✅ 모바일 퍼스트 접근
<div className="
  w-full
  md:w-1/2
  lg:w-1/3
  xl:w-1/4
  p-4
  md:p-6
  lg:p-8
">
  {/* 컨텐츠 */}
</div>

// ✅ 그리드 시스템
<div className="
  grid
  grid-cols-1
  sm:grid-cols-2
  md:grid-cols-3
  lg:grid-cols-4
  gap-4
  md:gap-6
">
  {/* 그리드 아이템들 */}
</div>
```

## 🔧 **상태 관리**

### **로컬 상태 관리**

```typescript
// ✅ useState 활용
export function Counter() {
  const [count, setCount] = useState(0)
  const [isLoading, setIsLoading] = useState(false)

  const increment = useCallback(() => {
    setCount(prev => prev + 1)
  }, [])

  return (
    <div className="flex items-center space-x-2">
      <Button onClick={increment} disabled={isLoading}>
        증가
      </Button>
      <span className="text-lg font-semibold">{count}</span>
    </div>
  )
}
```

### **커스텀 훅 활용**

```typescript
// hooks/use-modal.ts
export function useModal() {
  const [isOpen, setIsOpen] = useState(false)
  const [data, setData] = useState<any>(null)

  const open = useCallback((modalData?: any) => {
    setData(modalData)
    setIsOpen(true)
  }, [])

  const close = useCallback(() => {
    setIsOpen(false)
    setData(null)
  }, [])

  return {
    isOpen,
    data,
    open,
    close
  }
}

// 사용 예시
export function UserList() {
  const { isOpen, data, open, close } = useModal()

  return (
    <>
      <Button onClick={() => open({ id: 1, name: 'John' })}>
        사용자 상세
      </Button>

      <Dialog open={isOpen} onOpenChange={close}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>사용자 상세</DialogTitle>
          </DialogHeader>
          <div>{data?.name}</div>
        </DialogContent>
      </Dialog>
    </>
  )
}
```

## ♿ **접근성 (A11y)**

### **ARIA 속성 활용**

```typescript
// ✅ 접근성 고려한 컴포넌트
export function SearchInput({
  value,
  onChange,
  placeholder,
  'aria-label': ariaLabel,
  'aria-describedby': ariaDescribedby
}: SearchInputProps) {
  return (
    <div className="relative">
      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
      <Input
        type="search"
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        className="pl-10"
        aria-label={ariaLabel}
        aria-describedby={ariaDescribedby}
      />
    </div>
  )
}
```

### **키보드 네비게이션**

```typescript
// ✅ 키보드 이벤트 처리
export function DropdownMenu({ items }: DropdownMenuProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [selectedIndex, setSelectedIndex] = useState(0)

  const handleKeyDown = useCallback((e: KeyboardEvent) => {
    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault()
        setSelectedIndex(prev => (prev + 1) % items.length)
        break
      case 'ArrowUp':
        e.preventDefault()
        setSelectedIndex(prev => (prev - 1 + items.length) % items.length)
        break
      case 'Enter':
        e.preventDefault()
        items[selectedIndex]?.onClick?.()
        setIsOpen(false)
        break
      case 'Escape':
        setIsOpen(false)
        break
    }
  }, [items, selectedIndex])

  return (
    <div onKeyDown={handleKeyDown}>
      {/* 드롭다운 메뉴 */}
    </div>
  )
}
```

## 🔄 **성능 최적화**

### **메모이제이션**

```typescript
// ✅ React.memo 활용
export const ExpensiveComponent = React.memo(function ExpensiveComponent({
  data,
  onUpdate
}: ExpensiveComponentProps) {
  const processedData = useMemo(() => {
    return data.map(item => ({
      ...item,
      processed: item.value * 2
    }))
  }, [data])

  const handleClick = useCallback((id: string) => {
    onUpdate(id)
  }, [onUpdate])

  return (
    <div>
      {processedData.map(item => (
        <div key={item.id} onClick={() => handleClick(item.id)}>
          {item.processed}
        </div>
      ))}
    </div>
  )
})
```

### **지연 로딩**

```typescript
// ✅ 동적 임포트
const HeavyChart = dynamic(() => import('./heavy-chart'), {
  loading: () => <div className="h-64 flex items-center justify-center">로딩 중...</div>,
  ssr: false
})

// ✅ 조건부 렌더링
export function Dashboard({ showChart }: DashboardProps) {
  return (
    <div>
      <div>기본 정보</div>
      {showChart && <HeavyChart />}
    </div>
  )
}
```

## 🧪 **테스트 패턴**

### **컴포넌트 테스트**

```typescript
// __tests__/components/feature-card.test.tsx
import { render, screen, fireEvent } from '@testing-library/react'
import { FeatureCard } from '@/components/feature/feature-card'

describe('FeatureCard', () => {
  const defaultProps = {
    title: '테스트 제목',
    description: '테스트 설명'
  }

  it('renders title and description', () => {
    render(<FeatureCard {...defaultProps} />)

    expect(screen.getByText('테스트 제목')).toBeInTheDocument()
    expect(screen.getByText('테스트 설명')).toBeInTheDocument()
  })

  it('calls onClick when clicked', () => {
    const handleClick = jest.fn()
    render(<FeatureCard {...defaultProps} onClick={handleClick} />)

    fireEvent.click(screen.getByRole('button'))
    expect(handleClick).toHaveBeenCalledTimes(1)
  })

  it('applies custom className', () => {
    render(<FeatureCard {...defaultProps} className="custom-class" />)

    const card = screen.getByRole('button')
    expect(card).toHaveClass('custom-class')
  })
})
```

## 📋 **컴포넌트 개발 체크리스트**

### **기본 검증**

- [ ] Props 타입 정의 완료
- [ ] 기본 스타일링 적용
- [ ] 반응형 디자인 구현
- [ ] 접근성 속성 추가

### **기능 검증**

- [ ] 이벤트 핸들러 구현
- [ ] 상태 관리 로직
- [ ] 에러 처리
- [ ] 로딩 상태 처리

### **성능 검증**

- [ ] 불필요한 리렌더링 방지
- [ ] 메모이제이션 적용 (필요시)
- [ ] 번들 크기 최적화
- [ ] 이미지 최적화

## 🚫 **금지 사항**

### **성능 관련**

- ❌ 인라인 함수 정의
- ❌ 불필요한 상태 업데이트
- ❌ 큰 컴포넌트를 한 번에 렌더링
- ❌ 적절한 키 없이 리스트 렌더링

### **접근성 관련**

- ❌ 색상만으로 정보 전달
- ❌ 적절한 ARIA 속성 없음
- ❌ 키보드 네비게이션 지원 없음
- ❌ 포커스 관리 부족

### **코드 품질**

- ❌ 하드코딩된 스타일
- ❌ 복잡한 조건부 렌더링
- ❌ props drilling 과도 사용
- ❌ 타입 안전성 부족
  description:
  globs:
  alwaysApply: false

---
