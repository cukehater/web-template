# 🚀 새로운 기능 개발 가이드라인

## 📁 **프로젝트 구조 규칙**

### **디렉토리 구조**

```
src/app/(cms)/
├── entities/          # 도메인 엔티티 (admin-menu, auth, board 등)
├── features/          # 비즈니스 기능 (login, logout 등)
├── shared/            # 공통 컴포넌트 및 유틸리티
└── widgets/           # 재사용 가능한 위젯 (breadcrumb, sider 등)
```

### **파일 명명 규칙**

- **디렉토리**: 소문자 + 하이픈 (`admin-menu`, `rich-editor`)
- **컴포넌트**: PascalCase (`GalleryTable.tsx`, `LoginForm.tsx`)
- **훅**: camelCase + `use` 접두사 (`useLogin.ts`, `useActiveMenu.tsx`)
- **타입**: PascalCase + `Type` 접미사 (`BasicFormSchemaType`)
- **상수**: UPPER_SNAKE_CASE (`ALERT_MESSAGE`, `REGEX`)

## 🏗️ **아키텍처 패턴**

### **1. Feature-First 구조**

```
feature-name/
├── index.ts           # 메인 진입점
├── model/             # 비즈니스 로직
│   ├── types.ts       # 타입 정의
│   ├── hooks.ts       # 커스텀 훅
│   └── utils.ts       # 유틸리티 함수
├── ui/                # UI 컴포넌트
│   ├── feature-form.tsx
│   └── feature-table.tsx
└── page.tsx           # 페이지 컴포넌트
```

### **2. 컴포넌트 구조**

```typescript
// 1. 타입 정의
interface ComponentProps {
  // props 타입
}

// 2. 컴포넌트
export function ComponentName({ ...props }: ComponentProps) {
  // 로직
  return (
    // JSX
  )
}

// 3. 서브 컴포넌트 (필요시)
function SubComponent() {
  // ...
}

// 4. 헬퍼 함수 (필요시)
function helperFunction() {
  // ...
}
```

## 🔧 **기술 스택 규칙**

### **필수 사용 기술**

- **Next.js 15** + **React 19** (App Router)
- **TypeScript** (엄격 모드)
- **Tailwind CSS** + **Shadcn UI**
- **Zod** (스키마 검증)
- **React Hook Form** (폼 관리)
- **Prisma** (데이터베이스)
- **Jose** (JWT 인증)

### **상태 관리**

```typescript
// ✅ 권장: React Server Components + Server Actions
// ✅ 권장: 커스텀 훅으로 로컬 상태 관리
// ❌ 지양: 전역 상태 관리 라이브러리 (필요시에만)
```

## 📝 **코딩 스타일**

### **TypeScript 규칙**

```typescript
// ✅ 타입 안전성
interface User {
  id: string
  email: string
  name: string
}

// ✅ 제네릭 활용
function useApi<T>(endpoint: string) {
  // ...
}

// ❌ any 사용 금지
// ❌ 타입 단언 지양
```

### **React 패턴**

```typescript
// ✅ 함수형 컴포넌트
export function UserProfile({ user }: { user: User }) {
  return <div>{user.name}</div>
}

// ✅ 커스텀 훅
export function useUser(id: string) {
  const [user, setUser] = useState<User | null>(null)
  // ...
  return { user, loading, error }
}

// ❌ 클래스 컴포넌트 사용 금지
```

## 🔐 **보안 및 검증**

### **폼 검증 (Zod + React Hook Form)**

```typescript
import { z } from 'zod'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'

const schema = z.object({
  email: z.string().email('유효한 이메일을 입력하세요'),
  password: z.string().min(8, '비밀번호는 8자 이상이어야 합니다'),
})

type FormData = z.infer<typeof schema>

export function LoginForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(schema),
    defaultValues: {
      email: '',
      password: '',
    },
  })

  const onSubmit = async (data: FormData) => {
    // 서버 액션 호출
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)}>
        {/* 폼 필드 */}
      </form>
    </Form>
  )
}
```

### **API 라우트 패턴**

```typescript
// app/api/feature/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'

const schema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
})

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const validatedData = schema.parse(body)

    // 비즈니스 로직

    return NextResponse.json({ success: true })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: '유효하지 않은 데이터입니다' },
        { status: 400 },
      )
    }

    return NextResponse.json(
      { error: '서버 오류가 발생했습니다' },
      { status: 500 },
    )
  }
}
```

## 🎨 **UI/UX 규칙**

### **Shadcn UI 컴포넌트 사용**

```typescript
// ✅ 권장: Shadcn UI 컴포넌트 활용
import { Button } from '@/app/(cms)/shared/shadcn/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/app/(cms)/shared/shadcn/card'

// ✅ 일관된 스타일링
<Card className="w-full max-w-md">
  <CardHeader>
    <CardTitle>제목</CardTitle>
  </CardHeader>
  <CardContent>
    {/* 내용 */}
  </CardContent>
</Card>
```

### **반응형 디자인**

```typescript
// ✅ 모바일 퍼스트 접근
<div className="w-full md:w-1/2 lg:w-1/3">
  {/* 컨텐츠 */}
</div>

// ✅ Tailwind CSS 유틸리티 클래스 활용
<button className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors">
  버튼
</button>
```

## 🗄️ **데이터베이스 규칙**

### **Prisma 스키마 패턴**

```prisma
// prisma/schema.prisma
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}
```

### **데이터베이스 작업**

```typescript
// ✅ Prisma 클라이언트 사용
import { prisma } from '@/app/(cms)/shared/lib/prisma'

export async function createUser(data: CreateUserData) {
  return await prisma.user.create({
    data,
    select: {
      id: true,
      email: true,
      name: true,
    },
  })
}
```

## 🧪 **테스트 및 품질**

### **코드 품질**

- **ESLint** 규칙 준수
- **Prettier** 포맷팅 적용
- **TypeScript** 엄격 모드
- **import/export** 정렬

### **성능 최적화**

```typescript
// ✅ React Server Components 활용
// ✅ 동적 임포트
const DynamicComponent = dynamic(() => import('./Component'), {
  loading: () => <Skeleton />
})

// ✅ 이미지 최적화
import Image from 'next/image'
<Image src="/image.jpg" alt="설명" width={400} height={300} />
```

## 📋 **새 기능 개발 체크리스트**

### **1. 초기 설정**

- [ ] 디렉토리 구조 생성
- [ ] 타입 정의 (`types.ts`)
- [ ] Zod 스키마 생성
- [ ] 기본 컴포넌트 구조

### **2. 개발 단계**

- [ ] 비즈니스 로직 구현
- [ ] UI 컴포넌트 개발
- [ ] 폼 검증 및 에러 처리
- [ ] API 라우트 구현

### **3. 완료 단계**

- [ ] 타입 체크 통과
- [ ] ESLint 검사 통과
- [ ] 반응형 디자인 확인
- [ ] 접근성 검사

## 🚫 **금지 사항**

### **절대 하지 말아야 할 것들**

- ❌ `any` 타입 사용
- ❌ 클래스 컴포넌트 작성
- ❌ 인라인 스타일 사용
- ❌ 하드코딩된 값 사용
- ❌ 비동기 처리 없이 API 호출
- ❌ 에러 처리 생략
- ❌ 타입 검증 생략

### **지양해야 할 패턴**

- ❌ 전역 상태 과도 사용
- ❌ 컴포넌트 중첩 과도 사용
- ❌ 복잡한 조건부 렌더링
- ❌ 인라인 함수 정의

## 📚 **참고 파일**

### **기존 스키마 및 타입**

- [basic-form-schema.ts](<mdc:src/app/(cms)/shared/schema/basic-form-schema.ts>)
- [gallery-form-schema.ts](<mdc:src/app/(cms)/shared/schema/gallery-form-schema.ts>)

### **공통 컴포넌트**

- [shadcn 컴포넌트들](<mdc:src/app/(cms)/shared/shadcn/>)
- [공통 UI 컴포넌트](<mdc:src/app/(cms)/shared/ui/>)

### **유틸리티 함수**

- [공통 라이브러리](<mdc:src/app/(cms)/shared/lib/>)
- [Prisma 설정](<mdc:src/app/(cms)/shared/lib/prisma.ts>)
  description:
  globs:
  alwaysApply: false

---
