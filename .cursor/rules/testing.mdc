# Testing Rules & Best Practices

## 🧪 **CRITICAL: Testing Requirements**

**ALWAYS IMPLEMENT:**

- Unit tests for utility functions
- Component tests for UI components
- Integration tests for API endpoints
- E2E tests for critical user flows
- Test coverage above 80%

## 🧩 **Component Testing**

**MUST DO:**

- Test component rendering
- Test user interactions
- Test prop changes
- Test error states
- Mock external dependencies

**Example:**

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { UserForm } from './UserForm';

describe('UserForm', () => {
  it('should render form fields', () => {
    render(<UserForm onSubmit={jest.fn()} />);

    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
  });

  it('should validate required fields', async () => {
    const mockSubmit = jest.fn();
    render(<UserForm onSubmit={mockSubmit} />);

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    expect(await screen.findByText(/email is required/i)).toBeInTheDocument();
    expect(mockSubmit).not.toHaveBeenCalled();
  });

  it('should call onSubmit with valid data', async () => {
    const mockSubmit = jest.fn();
    render(<UserForm onSubmit={mockSubmit} />);

    fireEvent.change(screen.getByLabelText(/email/i), {
      target: { value: 'test@example.com' },
    });
    fireEvent.change(screen.getByLabelText(/password/i), {
      target: { value: 'password123' },
    });

    fireEvent.click(screen.getByRole('button', { name: /submit/i }));

    expect(mockSubmit).toHaveBeenCalledWith({
      email: 'test@example.com',
      password: 'password123',
    });
  });
});
```

## 🔧 **Utility Function Testing**

**ALWAYS DO:**

- Test edge cases
- Test error conditions
- Test with different input types
- Mock external dependencies

**Example:**

```typescript
import { formatCurrency, validateEmail } from './utils'

describe('formatCurrency', () => {
  it('should format positive numbers', () => {
    expect(formatCurrency(1234.56)).toBe('$1,234.56')
  })

  it('should handle zero', () => {
    expect(formatCurrency(0)).toBe('$0.00')
  })

  it('should handle negative numbers', () => {
    expect(formatCurrency(-1234.56)).toBe('-$1,234.56')
  })

  it('should throw error for invalid input', () => {
    expect(() => formatCurrency('invalid')).toThrow('Invalid number')
  })
})
```

## 🌐 **API Testing**

**MUST DO:**

- Test successful responses
- Test error responses
- Test different HTTP methods
- Mock external API calls
- Test authentication

**Example:**

```typescript
import { rest } from 'msw'
import { setupServer } from 'msw/node'
import { fetchUser } from './api'

const server = setupServer(
  rest.get('/api/users/:id', (req, res, ctx) => {
    const { id } = req.params
    return res(
      ctx.json({
        id,
        name: 'John Doe',
        email: 'john@example.com',
      }),
    )
  }),
)

beforeAll(() => server.listen())
afterEach(() => server.resetHandlers())
afterAll(() => server.close())

describe('fetchUser', () => {
  it('should fetch user successfully', async () => {
    const user = await fetchUser('123')

    expect(user).toEqual({
      id: '123',
      name: 'John Doe',
      email: 'john@example.com',
    })
  })

  it('should handle API errors', async () => {
    server.use(
      rest.get('/api/users/:id', (req, res, ctx) => {
        return res(ctx.status(404))
      }),
    )

    await expect(fetchUser('999')).rejects.toThrow('User not found')
  })
})
```

## 🚫 **NEVER DO:**

- Skip testing critical business logic
- Test implementation details
- Use brittle selectors (prefer accessible queries)
- Ignore test coverage
- Test third-party libraries
- Write tests that are too slow
  description:
  globs:
  alwaysApply: false

---
